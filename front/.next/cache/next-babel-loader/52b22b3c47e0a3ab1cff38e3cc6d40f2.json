{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(signUp),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignUp),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { call, all, delay, fork, put, takeLatest } from \"redux-saga/effects\";\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOG_IN_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n} // 로그인아웃 API\n\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: LOG_OUT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n} //signUp api는 제너레이터가아니다\n\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction signUp() {\n  var result;\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOG_OUT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: LOG_OUT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOG_OUT_REQUEST, logOut);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([//fork는 함수를 실행해준다\n          fork(watchLogin), fork(watchLogout), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/PYUNGKANG HONG/Desktop/CSE416_capstone/front/sagas/user.js"],"names":["logIn","logOut","signUp","watchLogin","watchLogout","watchSignUp","userSaga","call","all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","logInAPI","data","post","action","type","error","response","logOutAPI","result","signUpAPI","SIGN_UP_REQUEST"],"mappings":"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","sourcesContent":["import {call, all, delay, fork, put, takeLatest} from \"redux-saga/effects\";\r\nimport axios from 'axios';\r\nimport {    LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS,\r\n    LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS } from '../reducers/user';\r\n\r\nfunction logInAPI(data){\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\nfunction* logIn(action){\r\n    try{\r\n        // const result = yield call(logInAPI, action.data)\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: action.data\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            error: e.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n// 로그인아웃 API\r\nfunction logOutAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* logOut(){\r\n    try{\r\n        const result = yield call(logOutAPI)\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n//signUp api는 제너레이터가아니다\r\nfunction signUpAPI(){\r\n    return axios.post('/api/logout')\r\n}\r\n\r\nfunction* signUp(){\r\n    try{\r\n        const result = yield call(signUpAPI)\r\n        yield put({\r\n            type: LOG_OUT_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOG_OUT_FAILURE,\r\n            error: e.response.data,\r\n        })\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    //takeLatest 두번눌렸을때 마지막꺼만\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogout(){\r\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all([\r\n        //fork는 함수를 실행해준다\r\n        fork(watchLogin),\r\n        fork(watchLogout),\r\n        fork(watchSignUp),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}
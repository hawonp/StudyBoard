{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _initialState;\n\nimport shortId from 'shortid';\nimport faker from 'faker';\nimport produce from 'immer';\nexport var initialState = (_initialState = {\n  imagePaths: [],\n  postAdded: false,\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '제로초'\n    },\n    content: '첫 번째 게시글',\n    Images: [{\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg'\n    }, {\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'nero'\n      },\n      content: '우와 개정판이 나왔군요~'\n    }, {\n      User: {\n        nickname: 'hero'\n      },\n      content: '얼른 사고싶어요~'\n    }]\n  }]\n}, _defineProperty(_initialState, \"imagePaths\", []), _defineProperty(_initialState, \"hasMorePosts\", true), _defineProperty(_initialState, \"addPostLoading\", false), _defineProperty(_initialState, \"addPostDone\", false), _defineProperty(_initialState, \"addPostError\", null), _defineProperty(_initialState, \"addCommentLoading\", false), _defineProperty(_initialState, \"addCommentDone\", false), _defineProperty(_initialState, \"addCommentError\", null), _defineProperty(_initialState, \"removePostLoading\", false), _defineProperty(_initialState, \"removePostDone\", false), _defineProperty(_initialState, \"removePostError\", null), _defineProperty(_initialState, \"loadPostsLoading\", false), _defineProperty(_initialState, \"loadPostsDone\", false), _defineProperty(_initialState, \"loadPostsError\", null), _initialState);\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: 'PKKK'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: 'PKCC'\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어내느 함수가 리덕스(불변성은 지키면서 꼭)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      // 포스트할때 로딩\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n      // 인피니티드 스크롤링\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 30;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      // 포스트 업로드\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // 포스트 지우기\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      // 댓글 추가\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          // 드래프트에다 메인포스트에있으면 찾으면 id가 찾으면\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break; // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\n          // const post = { ...state.mainPosts[postIndex] };\n          // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = post;\n          // return {\n          //   ...state,\n          //   mainPosts,\n          //   addCommentLoading: false,\n          //   addCommentDone: true,\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/PYUNGKANG HONG/Desktop/CSE416_capstone/front/reducers/post.js"],"names":["shortId","faker","produce","initialState","imagePaths","postAdded","mainPosts","id","User","nickname","content","Images","src","Comments","generateDummyPost","number","Array","fill","map","generate","name","findName","lorem","paragraph","image","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","loadPostsLoading","loadPostsDone","loadPostsError","concat","hasMorePosts","length","error","addPostLoading","addPostDone","addPostError","unshift","removePostLoading","removePostDone","removePostError","filter","v","addCommentLoading","addCommentDone","addCommentError","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\r\nimport faker from 'faker';\r\nimport produce from 'immer';\r\n\r\n\r\n\r\nexport const initialState = {\r\n\r\n  imagePaths: [],\r\n  postAdded: false,\r\n  mainPosts: [{\r\n    id: 1,\r\n    User: {\r\n      id: 1,\r\n      nickname: '제로초',\r\n    },\r\n    content: '첫 번째 게시글',\r\n    Images: [{\r\n      src: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n    }, {\r\n      src: 'https://gimg.gilbut.co.kr/book/BN001958/rn_view_BN001958.jpg',\r\n    }, {\r\n      src: 'https://gimg.gilbut.co.kr/book/BN001998/rn_view_BN001998.jpg',\r\n    }],\r\n    Comments: [{\r\n      User: {\r\n        nickname: 'nero',\r\n      },\r\n      content: '우와 개정판이 나왔군요~',\r\n    }, {\r\n      User: {\r\n        nickname: 'hero',\r\n      },\r\n      content: '얼른 사고싶어요~',\r\n    }]\r\n  }],\r\n  imagePaths: [],\r\n  hasMorePosts: true,\r\n\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\r\n  id: shortId.generate(),\r\n  User: {\r\n    id: shortId.generate(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: shortId.generate(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.content,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'PKKK',\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: shortId.generate(),\r\n  content: data,\r\n  User: {\r\n    id: 1,\r\n    nickname: 'PKCC',\r\n  },\r\n});\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어내느 함수가 리덕스(불변성은 지키면서 꼭)\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    // 포스트할때 로딩\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsDone = false;\r\n      draft.loadPostsError = null;\r\n      break;\r\n      // 인피니티드 스크롤링\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.hasMorePosts = draft.mainPosts.length < 30;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n\r\n    // 포스트 업로드\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      draft.addPostDone = false;\r\n      draft.addPostError = null;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      draft.addPostDone = true;\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n\r\n      // 포스트 지우기\r\n    case REMOVE_POST_REQUEST:\r\n      draft.removePostLoading = true;\r\n      draft.removePostDone = false;\r\n      draft.removePostError = null;\r\n      break;\r\n    case REMOVE_POST_SUCCESS:\r\n      draft.removePostLoading = false;\r\n      draft.removePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n      break;\r\n    case REMOVE_POST_FAILURE:\r\n      draft.removePostLoading = false;\r\n      draft.removePostError = action.error;\r\n      break;\r\n\r\n      // 댓글 추가\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      draft.addCommentDone = false;\r\n      draft.addCommentError = null;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      // 드래프트에다 메인포스트에있으면 찾으면 id가 찾으면\r\n      const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n      post.Comments.unshift(dummyComment(action.data.content));\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentDone = true;\r\n      break;\r\n\r\n      // const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId);\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const mainPosts = [...state.mainPosts];\r\n      // mainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n    }\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentLoading = false;\r\n      draft.addCommentError = action.error;\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}
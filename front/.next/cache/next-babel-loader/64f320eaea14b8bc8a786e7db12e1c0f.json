{"ast":null,"code":"import { call, all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS } from '../reducers/user';\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: e.response.data\n    });\n  }\n} // 로그인아웃 API\n\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut(action) {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: action.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e.response.data\n    });\n  }\n} // signUp api는 제너레이터가아니다\n\n\nfunction signUpAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* signUp() {\n  try {\n    const result = yield call(signUpAPI);\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // takeLatest 두번눌렸을때 마지막꺼만\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([// fork는 함수를 실행해준다\n  fork(watchLogin), fork(watchFollow), fork(watchLogout), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/Users/PYUNGKANG HONG/Desktop/CSE416_capstone/front/sagas/user.js"],"names":["call","all","delay","fork","put","takeLatest","axios","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","logInAPI","data","post","logIn","action","type","e","error","response","logOutAPI","logOut","signUpAPI","signUp","result","watchLogin","watchLogout","watchSignUp","userSaga","watchFollow"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,IAA3B,EAAiCC,GAAjC,EAAsCC,UAAtC,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EACkBC,cADlB,EACkCC,cADlC,EAEEC,eAFF,EAEmBC,eAFnB,EAEoCC,eAFpC,EAGEC,eAHF,EAGmBC,eAHnB,EAGoCC,eAHpC,QAIO,kBAJP;;AAMA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACD;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEZ,cADE;AAERQ,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,CAAP,EAAU;AACV,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEd,cADE;AAERgB,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,SAASQ,SAAT,GAAqB;AACnB,SAAOnB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUQ,MAAV,CAAiBN,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAET,eADE;AAERK,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,CAAP,EAAU;AACV,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEX,eADE;AAERa,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,SAASU,SAAT,GAAqB;AACnB,SAAOrB,KAAK,CAACY,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUU,MAAV,GAAmB;AACjB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAM7B,IAAI,CAAC2B,SAAD,CAAzB;AACA,UAAMzB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAEN,eADE;AAERE,MAAAA,IAAI,EAAEY,MAAM,CAACZ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,CAAP,EAAU;AACV,UAAMlB,GAAG,CAAC;AACRiB,MAAAA,IAAI,EAAER,eADE;AAERU,MAAAA,KAAK,EAAED,CAAC,CAACE,QAAF,CAAWP;AAFV,KAAD,CAAT;AAID;AACF;;AAED,UAAUa,UAAV,GAAuB;AACrB;AACA,QAAMzB,UAAU,CAACG,cAAD,EAAiBW,KAAjB,CAAhB;AACD;;AACD,UAAUY,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACM,eAAD,EAAkBe,MAAlB,CAAhB;AACD;;AACD,UAAUM,WAAV,GAAwB;AACtB,QAAM3B,UAAU,CAACS,eAAD,EAAkBc,MAAlB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAMhC,GAAG,CAAC,CACR;AACAE,EAAAA,IAAI,CAAC2B,UAAD,CAFI,EAGR3B,IAAI,CAAC+B,WAAD,CAHI,EAIR/B,IAAI,CAAC4B,WAAD,CAJI,EAKR5B,IAAI,CAAC6B,WAAD,CALI,CAAD,CAAT;AAOD","sourcesContent":["import { call, all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS,\r\n} from '../reducers/user';\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post('/api/login', data);\r\n}\r\n\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data)\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// 로그인아웃 API\r\nfunction logOutAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* logOut(action) {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// signUp api는 제너레이터가아니다\r\nfunction signUpAPI() {\r\n  return axios.post('/api/logout');\r\n}\r\n\r\nfunction* signUp() {\r\n  try {\r\n    const result = yield call(signUpAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (e) {\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: e.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // takeLatest 두번눌렸을때 마지막꺼만\r\n  yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\nfunction* watchLogout() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    // fork는 함수를 실행해준다\r\n    fork(watchLogin),\r\n    fork(watchFollow),\r\n    fork(watchLogout),\r\n    fork(watchSignUp),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, call, put, throttle } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle(LOG_POST_REQUEST, addPost, 20000);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/PYUNGKANG HONG/Desktop/CSE416_capstone/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","call","put","throttle","axios","addPostAPI","data","post","action","result","type","ADD_POST_SUCCESS","ADD_POST_FAILURE","response","LOG_POST_REQUEST"],"mappings":";;oDAQUA,O;qDAgBAC,Y;qDAMeC,Q;;AA9BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,QAA/B,QAA+C,oBAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUV,OAAV,CAAkBY,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMP,IAAI,CAACI,UAAD,EAAaG,MAAM,CAACF,IAApB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMP,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEC,gBADA;AAENL,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMJ,GAAG,CAAC;AACNQ,YAAAA,IAAI,EAAEE,gBADA;AAENN,YAAAA,IAAI,EAAE,YAAEO,QAAF,CAAWP;AAFX,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUT,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMM,QAAQ,CAACW,gBAAD,EAAmBlB,OAAnB,EAA4B,KAA5B,CAAd;;AAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, throttle } from 'redux-saga/effects'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction addPostAPI(data){\r\n    return axios.post('/api/post', data)\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostAPI, action.data)\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: e.response.data,\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    //몇초제안 하는거 throttle 2초 보안으로\r\n    yield throttle(LOG_POST_REQUEST, addPost, 20000);\r\n}\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}